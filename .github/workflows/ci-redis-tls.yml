name: CI (Redis + RedisTLS for integration)

on:
  workflow_dispatch: {}
  push:
    branches: [ "ci/redis-tls-services" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci-redis-tls:
    runs-on: ubuntu-latest

    env:
      TZ: Asia/Tehran
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONWARNINGS: error
      REDIS_URL:  redis://127.0.0.1:6379/15
      REDISS_URL: rediss://127.0.0.1:6380/15
      REDIS_TLS_CA_FILE: ${{ github.workspace }}/ci/certs/server.crt
      REDIS_TLS_ALLOW_INSECURE: "1"

    services:
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s --health-timeout 3s --health-retries 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install project (CI extras)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[ci]

      - name: Verify redis and CI deps are importable
        run: |
          python -c "import sys; print('Python', sys.version)"
          python -c "import redis; print('redis', redis.__version__)"
          python -c "import prometheus_client, tenacity, yaml, jinja2; print('deps ok')"

      # ── RedisTLS via official image (redis:7) + TLS flags ─────────────────────
      - name: Launch Redis TLS container (6380)
        run: |
          docker run -d --name redistls \
            -p 6380:6380 \
            -v "$GITHUB_WORKSPACE/ci/certs:/certs:ro" \
            --health-cmd "redis-cli -p 6380 --tls --cacert /certs/server.crt ping || exit 1" \
            --health-interval 5s --health-timeout 3s --health-retries 30 \
            redis:7 \
            redis-server --port 0 --tls-port 6380 \
              --tls-cert-file /certs/server.crt \
              --tls-key-file  /certs/server.key \
              --tls-ca-cert-file /certs/server.crt

      - name: Wait for Redis TLS health
        run: |
          for i in {1..60}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' redistls || echo "starting")
            echo "redistls health: $STATUS"
            if [ "$STATUS" = "healthy" ]; then exit 0; fi
            sleep 1
          done
          echo "redistls not healthy in time"; docker logs redistls || true; exit 1

      - name: Pre-test cleanup (inline flush)
        run: |
          python - <<'PY'
          import os, ssl, sys
          import redis
          def flush(url, ca=None, allow_insecure=False):
              if not url:
                  return
              kw = {}
              if url.startswith("rediss://"):
                  kw["ssl"] = True
                  if allow_insecure:
                      ctx = ssl.create_default_context()
                      ctx.check_hostname = False
                      ctx.verify_mode = ssl.CERT_NONE
                      kw["ssl_context"] = ctx
                  elif ca:
                      kw["ssl_ca_certs"] = ca
              r = redis.Redis.from_url(url, **kw)
              try:
                  r.ping()
              except Exception as e:
                  print(f"[warn] ping failed for {url}: {e}", file=sys.stderr)
              try:
                  r.flushall()
                  print(f"[ok] FLUSHALL on {url}")
              except Exception as e:
                  print(f"[warn] flush failed for {url}: {e}", file=sys.stderr)
          flush(os.getenv("REDIS_URL"))
          flush(
              os.getenv("REDISS_URL"),
              ca=os.getenv("REDIS_TLS_CA_FILE"),
              allow_insecure=os.getenv("REDIS_TLS_ALLOW_INSECURE")=="1",
          )
          PY

      - name: Run CI tests (no skips/xfails)
        run: |
          pytest -q -p pytest_asyncio -W error tests/ci

      - name: Post-test cleanup (inline flush)
        if: always()
        run: |
          python - <<'PY'
          import os, ssl
          try:
              import redis
          except Exception as e:
              print(f"[warn] redis not importable in post-cleanup: {e}")
              raise SystemExit(0)
          def flush(url, ca=None):
              if not url:
                  return
              kw = {}
              if url.startswith("rediss://"):
                  kw["ssl"] = True
                  if ca:
                      kw["ssl_ca_certs"] = ca
              try:
                  redis.Redis.from_url(url, **kw).flushall()
                  print(f"[ok] POST FLUSHALL on {url}")
              except Exception as e:
                  print(f"[warn] post flush failed for {url}: {e}")
          flush(os.getenv("REDIS_URL"))
          flush(os.getenv("REDISS_URL"), os.getenv("REDIS_TLS_CA_FILE"))
          PY

      - name: Teardown Redis TLS container (always)
        if: always()
        run: |
          docker logs redistls || true
          docker rm -f redistls || true
