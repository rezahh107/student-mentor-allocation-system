"""Generate the WinSW XML manifest for the Student Mentor service."""

from __future__ import annotations

import argparse
from pathlib import Path
from textwrap import dedent

from src.reliability.atomic import atomic_write_text

DEFAULT_VERSION = "3.0.2"
TARGET_PATH = Path("windows_service/StudentMentorService.xml")

_TEMPLATE = dedent(
    """\
    <?xml version="1.0" encoding="utf-8"?>
    <!-- Generated by tools/generate_winsw.py; version={version} -->
    <service>
      <id>StudentMentorService</id>
      <name>Student Mentor Allocation Service</name>
      <description>FastAPI backend for ImportToSabt exports (WinSW managed).</description>
      <executable>python</executable>
      <arguments>-m windows_service.controller run</arguments>
      <workingdirectory>%BASE%</workingdirectory>
      <stoptimeout>15</stoptimeout>
      <startmode>Automatic</startmode>
      <logpath>{log_path}</logpath>
      <log mode="roll-by-size">
        <sizeThreshold>5242880</sizeThreshold>
        <keepFiles>5</keepFiles>
      </log>
      <env name="PYTHONUTF8" value="1"/>
      <env name="PYTHONUNBUFFERED" value="1"/>
      <env name="FAKE_WEBVIEW" value="0"/>
      <restart mode="delayed" period="5 sec" reset="1 hour"/>
      <download url="https://github.com/winsw/winsw/releases/download/v{version}/WinSW-x64.exe"/>
    </service>
    """
)


def render(version: str = DEFAULT_VERSION) -> str:
    log_path = "%APPDATA%\\StudentMentorApp\\logs"
    return _TEMPLATE.format(version=version, log_path=log_path)


def generate(path: Path = TARGET_PATH, *, version: str = DEFAULT_VERSION) -> Path:
    payload = render(version)
    path.parent.mkdir(parents=True, exist_ok=True)
    atomic_write_text(path, payload)
    return path


def _parse_args(argv: list[str] | None = None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Generate WinSW XML manifest.")
    parser.add_argument("--version", default=DEFAULT_VERSION, help="WinSW release version.")
    parser.add_argument("--output", default=str(TARGET_PATH), help="Destination XML path.")
    return parser.parse_args(argv)


def main(argv: list[str] | None = None) -> int:
    args = _parse_args(argv)
    target = generate(Path(args.output), version=args.version)
    print(f"Generated {target} for WinSW {args.version}")  # noqa: T201 - intentional CLI output
    return 0


if __name__ == "__main__":  # pragma: no cover - CLI entry
    raise SystemExit(main())
