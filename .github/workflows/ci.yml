name: Phase 2 Counter CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'src/phase2_counter_service/**'
      - 'tests/phase2_counter_service/**'
      - 'scripts/post_migration_checks.py'
      - 'scripts/validate_artifacts.py'
      - 'requirements*.txt'
      - '.github/workflows/ci.yml'
  push:
    branches: [main]
    paths:
      - 'src/phase2_counter_service/**'
      - 'tests/phase2_counter_service/**'
      - 'scripts/post_migration_checks.py'
      - 'scripts/validate_artifacts.py'
      - 'requirements*.txt'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

concurrency:
  group: phase2-counter-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gates:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.11'
            with_cov: true
          - python-version: '3.12'
            with_cov: true
          - python-version: '3.11'
            with_cov: false
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
      LC_ALL: C.UTF-8
      PYTHONUTF8: '1'
      COV_MIN: ${{ env.COV_MIN != '' && env.COV_MIN || '95' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (with extras)
        run: |
          python -m pip install -U pip
          pip install -e ".[fastapi,redis,dev]" || true
          pip install fastapi uvicorn httpx pytest pytest-asyncio redis prometheus-client
          pip install aiohttp sqlalchemy python-dateutil

      - name: Install security dependencies
        run: |
          pip install -r requirements-security.txt

      - name: Verify security dependencies
        run: |
          python -c "import defusedxml; print(f'defusedxml {defusedxml.__version__} نصب شد')"

      - name: Configure pytest-cov availability
        run: |
          if [ "${{ matrix.with_cov }}" = "false" ]; then
            pip uninstall -y pytest-cov || true
          fi

      - name: Run fault injection tests
        if: matrix.with_cov == true
        run: make fault-tests

      - name: Run static analysis gates
        if: matrix.with_cov == true
        run: make static-checks

      - name: Run legacy coverage gate
        env:
          PYTEST_ARGS: "-q --maxfail=1 -p pytest_cov --cov=src --cov-report=term --cov-report=xml --cov-report=html"
        run: |
          if [ "${{ matrix.with_cov }}" = "false" ]; then
            set +e
            OUTPUT=$(make test-coverage-summary 2>&1)
            STATUS=$?
            printf '%s\n' "$OUTPUT"
            if [ "$STATUS" -eq 0 ]; then
              echo "انتظار می‌رفت در نبود pytest-cov اسکریپت شکست بخورد" >&2
              exit 1
            fi
            echo "$OUTPUT" | grep 'PYTEST_COV_MISSING'
            exit 0
          else
            make test-coverage-summary
          fi

      - name: Upload legacy coverage HTML report
        if: always() && matrix.python-version == '3.11' && matrix.with_cov == true
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov
          if-no-files-found: warn

      - name: Run full CI checks (coverage + post-validators)
        if: matrix.python-version == '3.11' && matrix.with_cov == true
        run: make ci-checks

  security-scan:
    runs-on: ubuntu-latest
    needs: gates
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
      UI_MINIMAL: '1'
      LC_ALL: C.UTF-8
      PYTHONUTF8: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies for security gate
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt bandit types-PyYAML

      - name: Install security dependencies
        run: |
          pip install -r requirements-security.txt

      - name: Verify security dependencies
        run: |
          python -c "import defusedxml; print(f'defusedxml {defusedxml.__version__} نصب شد')"

      - name: Run static security checks (با خلاصه فارسی)
        run: make security-scan

      - name: Upload Bandit JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-json
          path: reports/bandit.json
          if-no-files-found: warn
