[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "student-mentor-allocation-system"
version = "0.1.0"  # ✅ تغییر از 0.0.0
description = "Student Mentor Allocation System"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Reza", email = "ops@example.invalid" }]
keywords = ["education", "mentoring", "allocation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Education",
]

# ═══════════════════════════════════════════════════════════════
# Dependencies
# ═══════════════════════════════════════════════════════════════

dependencies = [
    "pydantic>=2.6,<3",
    "pydantic-settings>=2.11,<3",
    "fastapi>=0.110,<0.111",
    "SQLAlchemy>=2.0,<3",
    "redis>=5,<6",
    "prometheus-client>=0.19",
    "openpyxl>=3.1,<4",
    "XlsxWriter>=3.1,<4",
    "jdatetime>=4.1,<5",
    "click>=8.1",
    "Jinja2>=3.1",
    "PyYAML>=6.0",
    "packaging>=23.2",
    "platformdirs>=3.11",
    "jsonschema>=4.23",
    "structlog>=24.1",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.5.0",
    "mypy>=1.8.0",
    "pydocstyle>=6.3.0",
    "pre-commit>=3.5.0",
    "pytest>=7.4",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.3",
    "pytest-timeout>=2.1",
    "pytest-json-report>=1.5",
    "coverage[toml]>=7.4",
    "pip-audit>=2.7",
    "cyclonedx-bom>=3.1",
    "freezegun>=1.3.1",
    "fakeredis>=2.19",
]

test = [
    "pytest>=7.4",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.3",
    "pytest-timeout>=2.1",
    "pytest-html>=3.2",
    "pytest-json-report>=1.5",
    "pytest-mock>=3.11",
    "pytest-freezegun>=0.4.2",
    "pytest-qt>=4.2",
    "freezegun>=1.3.1",
    "fakeredis>=2.19",
    "httpx>=0.24,<1.0",
    "pip-audit>=2.7",
    "cyclonedx-bom>=3.1",
]

ci = [
    # Testing
    "pytest>=7.4",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.3",
    "pytest-timeout>=2.1",
    "pytest-html>=3.2",
    "pytest-json-report>=1.5",
    "coverage[toml]>=7.4",

    # Quality tools
    "ruff>=0.5.0",
    "mypy>=1.8.0",
    "pydocstyle>=6.3.0",

    # Utilities / Security
    "freezegun>=1.3.1",
    "fakeredis>=2.19",
    "pip-audit>=2.7",
    "cyclonedx-bom>=3.1",
]

[tool.setuptools]
package-dir = { "" = "src" }
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"phase6_import_to_sabt" = [
    "templates/**/*",
]

# ═══════════════════════════════════════════════════════════════
# Ruff Configuration
# ═══════════════════════════════════════════════════════════════

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C90", # mccabe
    "PL",  # pylint
    "RUF", # ruff-specific
]
ignore = ["E203", "E501"]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D100", "D103", "PLR2004"]
"__init__.py" = ["F401"]

[tool.ruff.lint.pylint]
max-statements = 120

[tool.ruff.lint.isort]
known-first-party = ["student_mentor_allocation_system"]

# ═══════════════════════════════════════════════════════════════
# MyPy Configuration
# ═══════════════════════════════════════════════════════════════

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
show_error_codes = true
enable_error_code = ["ignore-without-code"]

# Paths
files = ["src", "tests/ci", "tools"]
exclude = [
    "build",
    "dist",
    ".venv",
    "venv",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "openpyxl.*",
    "jdatetime.*",
    "fakeredis.*",
]
ignore_missing_imports = true

# ═══════════════════════════════════════════════════════════════
# Pydocstyle Configuration
# ═══════════════════════════════════════════════════════════════

[tool.pydocstyle]
convention = "pep257"
match = "(?!test_).*\\.py"
add-ignore = ["D104", "D203", "D213"]

# ═══════════════════════════════════════════════════════════════
# Pytest Configuration (Minimal - main config in pytest.ini)
# ═══════════════════════════════════════════════════════════════

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
# ⚠️ سایر تنظیمات در pytest.ini است!

# ═══════════════════════════════════════════════════════════════
# Coverage Configuration
# ═══════════════════════════════════════════════════════════════

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
    "@abstractmethod",
    "@overload",
    "\\.\\.\\.$",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
