name: Windows CI Hardening

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  id-token: write

env:
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
  TZ: Asia/Tehran

defaults:
  run:
    shell: pwsh

jobs:
  smoke:
    name: Windows smoke + integration
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Restore pip download cache
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "pip"

      - name: Bootstrap Python environment
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          ./scripts/ci/windows_bootstrap.ps1 -Requirements "requirements-test.txt" -Force

      - name: Validate dependency footprint
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          .\.venv\Scripts\Activate.ps1
          python -m pip list
          python -m pip check
          python - <<'PY'
import json
import sys
import sysconfig
from pathlib import Path

artifacts = Path("artifacts")
artifacts.mkdir(exist_ok=True)
constraints = {
    "python_version": sys.version,
    "site_packages": sysconfig.get_paths().get("purelib"),
}
(artifacts / "environment.json").write_text(json.dumps(constraints, indent=2), encoding="utf-8")
PY

      - name: Pre-flight cleanup
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          .\.venv\Scripts\Activate.ps1
          python tools/ci/clean_state.py --phase pre --namespace windows-ci-smoke

      - name: Run deterministic smoke tests
        env:
          PYTEST_ADDOPTS: "--maxfail=1 --tb=short --strict-config --strict-markers"
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          ./scripts/ci/run_pytest_windows.ps1 -Targets @(
            'tests/spec/test_normalization_edgecases.py',
            'tests/spec/test_business_rules.py',
            'tests/spec/test_excel_exporter_safety.py',
            'tests/windows/test_spawn_e2e.py'
          ) -Config 'pytest.win.ini' -MaxAttempts 2

      - name: Run middleware and integration contracts
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          ./scripts/ci/run_pytest_windows.ps1 -Targets @(
            'tests/integration/test_middleware_chain.py',
            'tests/integration/test_middleware_order.py'
          ) -Config 'pytest.win.ini' -MaxAttempts 2

      - name: Run full regression slice
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          ./scripts/ci/run_pytest_windows.ps1 -Targets @('tests/spec', 'tests/windows', 'tests/integration') -Config 'pytest.win.ini' -MaxAttempts 2

      - name: Capture debug context
        if: failure()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          .\.venv\Scripts\Activate.ps1
          python tools/ci/debug_context.py --reason failure --attempt 99 --namespace windows-ci-smoke --message "Collecting context after failure"

      - name: Post-run cleanup
        if: always()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          .\.venv\Scripts\Activate.ps1
          python tools/ci/clean_state.py --phase post --namespace windows-ci-smoke

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-ci-artifacts
          path: |
            artifacts
            .pytest_cache
            logs
          if-no-files-found: ignore
