name: CI (Redis + RedisTLS for integration)


on:
  workflow_dispatch: {}   # اجرای دستی از تب Actions
  push:
    branches: [ "ci/redis-tls-services" ]
  pull_request:
    branches: [ "main" ]


jobs:
  ci-redis-tls:
    runs-on: ubuntu-latest

    env:
      TZ: Asia/Tehran
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONWARNINGS: error
      REDIS_URL:  redis://127.0.0.1:6379/15
      REDISS_URL: rediss://127.0.0.1:6380/15
      # برای سناریوی "requires_ca_success"
      REDIS_TLS_CA_FILE: ${{ github.workspace }}/ci/certs/server.crt
      # برای سناریوی "allow_insecure"
      REDIS_TLS_ALLOW_INSECURE: "1"

    services:
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s --health-timeout 3s --health-retries 30

      redistls:
        # Redis با TLS؛ از بیتنامی که TLS داخلی را پشتیبانی می‌کند
        image: bitnami/redis:7.2
        ports: [ "6380:6380" ]
        env:
          REDIS_TLS_ENABLED: "yes"
          REDIS_TLS_PORT_NUMBER: "6380"
          REDIS_TLS_AUTH_CLIENTS: "no"
          REDIS_PASSWORD: ""
          REDIS_TLS_CERT_FILE: /certs/server.crt
          REDIS_TLS_KEY_FILE:  /certs/server.key
          REDIS_TLS_CA_FILE:   /certs/server.crt
        volumes:
          - ${{ github.workspace }}/ci/certs:/certs:ro
        options: >-
          --health-cmd "redis-cli -h 127.0.0.1 -p 6380 --tls --cacert /certs/server.crt ping || exit 1"
          --health-interval 5s --health-timeout 3s --health-retries 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install project (CI extras)
        run: |
          python -m pip install --upgrade pip
          # تلاش برای نصب اکستراهای CI؛ اگر نبودند، نصب معمولی
          pip install -e .[ci] || pip install -e .
          # تضمین وابستگی‌های ضروری برای تست‌های CI
          pip install "redis>=5,<6" "prometheus-client>=0.20,<0.21" "tenacity>=8,<9" "pyyaml>=6,<7" "jinja2>=3,<4"


      - name: Pre-test cleanup (flush Redis and Redis/TLS)
        run: |
          python - <<'PY'
          import os, ssl, sys
          import redis
          def flush(url, ca=None, allow_insecure=False):
              kw = {}
              if url.startswith("rediss://"):
                  if allow_insecure:
                      ctx = ssl.create_default_context()
                      ctx.check_hostname = False
                      ctx.verify_mode = ssl.CERT_NONE
                      kw["ssl"] = True
                      kw["ssl_cert_reqs"] = None
                      kw["ssl_ca_certs"] = None
                      kw["ssl_certfile"] = None
                      kw["ssl_keyfile"] = None
                      kw["ssl_context"] = ctx
                  else:
                      kw["ssl"] = True
                      if ca:
                          kw["ssl_ca_certs"] = ca
              r = redis.Redis.from_url(url, **kw)
              try:
                  r.ping()
              except Exception as e:
                  print(f"[warn] ping failed for {url}: {e}", file=sys.stderr)
              try:
                  r.flushall()
                  print(f"[ok] FLUSHALL on {url}")
              except Exception as e:
                  print(f"[warn] flush failed for {url}: {e}", file=sys.stderr)
          flush(os.getenv("REDIS_URL", "redis://127.0.0.1:6379/15"))
          flush(
              os.getenv("REDISS_URL", "rediss://127.0.0.1:6380/15"),
              ca=os.getenv("REDIS_TLS_CA_FILE"),
              allow_insecure=os.getenv("REDIS_TLS_ALLOW_INSECURE")=="1",
          )
          PY

      - name: Run CI tests (no skips/xfails)
        run: |
          pytest -q -p pytest_asyncio -W error tests/ci

      - name: Post-test cleanup (always)
        if: always()
        run: |
          python - <<'PY'
          import os, ssl
          import redis
          def flush(url, ca=None):
              kw = {}
              if url.startswith("rediss://"):
                  kw["ssl"] = True
                  if ca:
                      kw["ssl_ca_certs"] = ca
              try:
                  redis.Redis.from_url(url, **kw).flushall()
              except Exception as e:
                  print(f"[warn] post flush failed for {url}: {e}")
          flush(os.getenv("REDIS_URL", "redis://127.0.0.1:6379/15"))
          flush(os.getenv("REDISS_URL", "rediss://127.0.0.1:6380/15"), os.getenv("REDIS_TLS_CA_FILE"))
          PY
