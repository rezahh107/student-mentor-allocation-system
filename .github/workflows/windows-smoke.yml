name: Windows Smoke

on:
  push:
    branches: ["main", "master"]
  pull_request:

jobs:
  smoke:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clear cached state
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Set-Location $env:GITHUB_WORKSPACE
          $runId = if ($env:GITHUB_RUN_ID) { $env:GITHUB_RUN_ID } else { Get-Date -Format 'yyyyMMddHHmmss' }
          if (Test-Path .\tools\win\clear_state.ps1) {
              pwsh -NoLogo -File .\tools\win\clear_state.ps1 -Force -RunId $runId
          }

      - name: Run Windows installer
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Set-Location $env:GITHUB_WORKSPACE
          $runId = if ($env:GITHUB_RUN_ID) { $env:GITHUB_RUN_ID } else { Get-Date -Format 'yyyyMMddHHmmss' }
          if (-not (Test-Path 'reports\ci')) { New-Item -ItemType Directory -Path 'reports\ci' | Out-Null }
          $logPath = 'reports\ci\installer.log'
          $output = & .\scripts\win\install_and_run.ps1 -Ci -Port 8000 -MetricsToken 'dev-metrics-token' -RunId $runId 2>&1 | Tee-Object -FilePath $logPath
          if ($LASTEXITCODE -ne 0) {
              Write-Host $output
              exit $LASTEXITCODE
          }

      - name: Parse installer markers
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Set-Location $env:GITHUB_WORKSPACE
          python .\tools\ci\parse_markers.py reports\ci\installer.log --json reports\ci\markers-summary.json

      - name: Verify probe expectations
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Set-Location $env:GITHUB_WORKSPACE
          if (-not (Test-Path 'reports\ci\probes.json')) { throw 'probes.json missing' }
          $data = Get-Content -Raw -Path 'reports\ci\probes.json' | ConvertFrom-Json
          if (-not $data) { throw 'No probe entries recorded' }
          $lookup = @{}
          foreach ($entry in $data) { $lookup[$entry.label] = $entry.status }
          if (-not ($lookup.ContainsKey('/readyz') -and $lookup['/readyz'] -eq 200) -and -not ($lookup.ContainsKey('/healthz') -and $lookup['/healthz'] -eq 200) -and -not ($lookup.ContainsKey('/health') -and $lookup['/health'] -eq 200)) {
              throw 'Readiness probe did not return HTTP 200'
          }
          if (-not $lookup.ContainsKey('/docs') -or $lookup['/docs'] -ne 200) {
              throw '/docs did not return HTTP 200'
          }
          if (-not $lookup.ContainsKey('/metrics (no token)') -or $lookup['/metrics (no token)'] -ne 403) {
              throw '/metrics without token expected HTTP 403'
          }
          if (-not $lookup.ContainsKey('/metrics (with token)') -or $lookup['/metrics (with token)'] -ne 200) {
              throw '/metrics with token expected HTTP 200'
          }

      - name: Run middleware order test
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Set-Location $env:GITHUB_WORKSPACE
          $env:PYTEST_DISABLE_PLUGIN_AUTOLOAD = '1'
          pytest -q tests/middleware/test_order.py

      - name: Run Excel export safety test
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Set-Location $env:GITHUB_WORKSPACE
          $env:PYTEST_DISABLE_PLUGIN_AUTOLOAD = '1'
          pytest -q tests/excel/test_safe_export.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-smoke-artifacts
          path: |
            reports/**
            tmp/win-run/uvicorn.log
