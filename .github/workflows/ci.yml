name: CI

on:
  push:
  pull_request:

env:
  PYTHONWARNINGS: "error"
  PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
  RUN_INTEGRATION: ${{ vars.RUN_INTEGRATION || '1' }}

jobs:
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: Show Python version
        run: python --version

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install quality dependencies
        run: |
          pip install -e ".[dev]" -c constraints-dev.txt
          pip install black isort "bandit[toml]" pip-audit

      - name: Reality Map
        run: python scripts/reality_map.py

      - name: Check formatting with Black
        run: black --check --diff .

      - name: Check import order with isort
        run: isort --check-only --diff .

      - name: Run Ruff lint
        run: ruff check .

      - name: Run Ruff format validation
        run: ruff format --check --diff .

      - name: Run MyPy type checks
        run: mypy --config-file pyproject.toml

      - name: Run Bandit security scan
        run: bandit -c pyproject.toml -r src

      - name: Run pip-audit vulnerability scan
        run: pip-audit --strict

  unit:
    name: Unit / Lintless Gate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11.9"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Show Python version
        run: python --version

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install project (dev extras)
        run: pip install -e ".[dev]"

      - name: Validate dependency graph
        run: pip check

      - name: Run unit-focused tests
        run: pytest -q --warnings=error -c pytest.min.ini -m "not integration"

  integration:
    name: Integration Matrix
    if: ${{ env.RUN_INTEGRATION != '0' }}
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      RUN_INTEGRATION: "1"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11.9"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Show Python version
        run: python --version

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install project (dev extras)
        run: pip install -e ".[dev]"

      - name: Validate dependency graph
        run: pip check

      - name: Run integration tests
        run: pytest -q --warnings=error -c pytest.min.ini -m "integration"

  performance:
    name: Export Performance Budgets
    needs: quality
    runs-on: ubuntu-latest
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTEST_PERF_METRICS_PATH: test-results/performance-metrics.json
      SMA_PERF_SAMPLE_SIZE: "100000"
      SMA_PERF_ATTEMPTS: "5"
      SMA_PERF_CHUNK: "5000"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: Show Python version
        run: python --version

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install performance dependencies
        run: pip install -e ".[dev]" -c constraints-dev.txt

      - name: Reality Map
        run: python scripts/reality_map.py

      - name: Run performance suite
        run: PYTHONWARNINGS=error pytest tests/performance -q --maxfail=1

      - name: Validate performance budgets
        run: python tests/performance/validate_budgets.py --baseline tests/performance/baseline.json --summary test-results/export_perf.json

      - name: Upload performance metrics
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: performance-budgets
          path: |
            test-results/performance-metrics.json
            test-results/export_perf.json
            test-results/evidence_map.json
