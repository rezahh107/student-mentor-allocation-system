# فایل: .github/workflows/python-setup.yml
name: "🚀 Enterprise Python CI/CD"

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # هر دوشنبه ساعت 2 صبح

env:
  # 🔧 تنظیمات سراسری Enterprise
  PYTHON_VERSION: '3.11'
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # 🏗️ مرحله آماده‌سازی
  setup-environment:
    name: "🔧 Environment Setup"
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.key }}
      python-version: ${{ env.PYTHON_VERSION }}
    
    steps:
    - name: "📥 Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "🔑 Generate Cache Keys"
      id: cache-keys
      run: |
        echo "key=python-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}" >> $GITHUB_OUTPUT
        echo "week=$(date +%V)" >> $GITHUB_OUTPUT

  # متأسفانه، یک خطای کوچک در فایل YAML شما وجود دارد. مشکل در تورفتگی (indentation) بخش "Enterprise Dependency Installation" است. اینطوری درست‌تر است:

```yaml
# فایل: .github/workflows/python-setup.yml
name: "🚀 Enterprise Python CI/CD"

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # هر دوشنبه ساعت 2 صبح

env:
  # 🔧 تنظیمات سراسری Enterprise
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ${{ github.workspace }}/.enterprise-cache/pip
  PIP_NO_CACHE_DIR: false
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # 🏗️ مرحله آماده‌سازی
  setup-environment:
    name: "🔧 Environment Setup"
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.key }}
      python-version: ${{ env.PYTHON_VERSION }}
    
    steps:
    - name: "📥 Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "🔑 Generate Cache Keys"
      id: cache-keys
      run: |
        echo "key=python-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}" >> $GITHUB_OUTPUT
        echo "week=$(date +%V)" >> $GITHUB_OUTPUT

  # 🐍 مرحله تنظیم Python
  python-setup:
    name: "🐍 Python Configuration"
    runs-on: ubuntu-latest
    needs: setup-environment
    
    steps:
    - name: "📥 Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "🏗️ Create Enterprise Cache Structure"
      run: |
        mkdir -p .enterprise-cache/pip
        mkdir -p .enterprise-cache/pytest
        mkdir -p .enterprise-cache/coverage
        chmod -R 755 .enterprise-cache/
        
    - name: "🐍 Setup Python with Enterprise Config"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt
          requirements-test.txt
          pyproject.toml
          setup.py
          
    - name: "⚙️ Configure Enterprise Pip Settings"
      run: |
        # ایجاد تنظیمات pip حرفه‌ای
        mkdir -p ~/.pip
        cat > ~/.pip/pip.conf << 'EOF'
        [global]
        cache-dir = ${{ env.PIP_CACHE_DIR }}
        no-cache-dir = false
        disable-pip-version-check = true
        timeout = 120
        retries = 3
        trusted-host = pypi.org
                      pypi.python.org
                      files.pythonhosted.org
        
        [install]
        upgrade-strategy = eager
        use-pep517 = true
        EOF
        
        # اطمینان از صحت تنظیمات
        python -m pip config list
        python -m pip cache info || echo "Cache info not available yet"
        
    - name: "📦 Enterprise Dependency Installation"
      run: |
        echo "🔄 Upgrading core tools..."
        python -m pip install --upgrade pip setuptools wheel
        
        echo "📋 Installing main dependencies..."
        pip install -r requirements.txt
        
        echo "🔍 Verifying critical dependencies..."
        python -c "
        critical_deps = ['fastapi', 'pydantic', 'pytest', 'redis', 'psycopg']
        import importlib
        for dep in critical_deps:
            try:
                importlib.import_module(dep.replace('-', '_'))
                print(f'✅ {dep}: OK')
            except ImportError as e:
                print(f'❌ {dep}: {e}')
        "
        
    - name: "✅ Verify Installation"
      run: |
        echo "🔍 Python Environment Info:"
        python --version
        pip --version
        pip list --format=columns
        
        echo "💾 Cache Status:"
        python -c "
        import pip._internal.utils.misc as misc
        cache_dir = misc.get_cache_dir()
        print(f'Cache Directory: {cache_dir}')
        print(f'Cache Enabled: {cache_dir is not None}')
        "
        
    - name: "💾 Cache Dependencies for Future Runs"
      uses: actions/cache@v4
      with:
        path: |
          .enterprise-cache/
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ needs.setup-environment.outputs.cache-key }}
        restore-keys: |
          python-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
          python-${{ runner.os }}-

  # 🧪 مرحله تست
  testing:
    name: "🧪 Enterprise Testing"
    runs-on: ubuntu-latest
    needs: [setup-environment, python-setup]
    
    steps:
    - name: "📥 Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: "💾 Restore Enterprise Cache"
      uses: actions/cache@v4
      with:
        path: |
          .enterprise-cache/
          ~/.cache/pip
        key: ${{ needs.setup-environment.outputs.cache-key }}
        
    - name: "🏃‍♂️ Run Tests"
      run: |
        echo "🧪 Running enterprise test suite..."
        # اینجا تست‌های خودت رو اضافه کن
        python -m pytest --version || echo "pytest not installed"
        
  # 📊 مرحله گزارش‌گیری
  reporting:
    name: "📊 Enterprise Reporting"
    runs-on: ubuntu-latest
    needs: [testing]
    if: always()
    
    steps:
    - name: "📈 Generate Build Report"
      run: |
        echo "🎯 Enterprise Build Summary:"
        echo "✅ Environment Setup: Complete"
        echo "✅ Python Configuration: Complete"  
        echo "✅ Dependency Installation: Complete"
        echo "✅ Testing Phase: Complete"
        echo "🚀 Ready for Production!"
