name: Strict CI Orchestration

on:
  push:
    branches: ['**']
  pull_request:

permissions:
  contents: read
  actions: write
  checks: read

concurrency:
  group: strict-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      redis:
        image: redis:7-alpine
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping" --health-interval 5s --health-timeout 5s --health-retries 20

    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
      PYTHONUTF8: '1'
      MPLBACKEND: 'Agg'
      QT_QPA_PLATFORM: 'offscreen'
      PYTHONDONTWRITEBYTECODE: '1'
      # هشدارها را global به error تبدیل نکن
      REDIS_URL: ${{ secrets.CI_REDIS_URL != '' && secrets.CI_REDIS_URL || 'redis://localhost:6379/0' }}
      CI_CORRELATION_ID: "be862f1780d7"
      METRICS_TOKEN: "test-token"
      APP_ENV: "test"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          # fallback dev-deps (برای جلوگیری از ModuleNotFoundError)
          pip install -U \
            httpx aiohttp pytest-asyncio asgi-lifespan respx pytest-httpx requests \
            psutil orjson openpyxl pandas jdatetime python-multipart prometheus-client redis fakeredis freezegun hypothesis

      - name: Prepare pytest config & caches
        run: |
          mkdir -p reports
          # pytest.ini مینیمال اگر خراب/غایب است
          if ! grep -q "^\[pytest\]" pytest.ini 2>/dev/null; then
            cat > pytest.ini <<'INI'
          [pytest]
          asyncio_mode = auto
          testpaths = tests
          python_files = test_*.py *_test.py
          python_classes = Test*
          python_functions = test_*
          INI
          fi
          # پاکسازی کش‌ها
          rm -rf .pytest_cache
          find tests -type d -name "__pycache__" -prune -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
          # جلوگیری از import mismatch
          for d in tests tests/obs tests/observability tests/logging tests/perf tests/security tests/integration tests/unit tests/uploads tests/i18n; do
            [ -d "$d" ] && touch "$d/__init__.py"
          done
          # MultiProc Prometheus (اگر لازم شد)
          export PROMETHEUS_MULTIPROC_DIR="$(mktemp -d)"
          echo "PROMETHEUS_MULTIPROC_DIR=$PROMETHEUS_MULTIPROC_DIR" >> $GITHUB_ENV

      - name: Static / Security gates (optional)
        run: |
          # فقط اگر target وجود دارد
          (make -n pii-scan >/dev/null 2>&1 && make pii-scan) || echo "skip: pii-scan"
          (make -n static-checks >/dev/null 2>&1 && make static-checks) || echo "skip: static-checks"
          (make -n ci-checks >/dev/null 2>&1 && make ci-checks) || echo "skip: ci-checks"

      - name: Run Test Orchestrator (smoke)
        run: |
          python -m tools.test_orchestrator --suite smoke --summary reports/summary.md --score reports/strict_score.json || exit 1

      - name: Run Test Orchestrator (phase2)
        run: |
          python -m tools.test_orchestrator --suite phase2 --summary reports/summary.md --score reports/strict_score.json || exit 1

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports
          if-no-files-found: warn
          path: |
            reports/summary.md
            reports/strict_score.json
            reports/pytest-junit.xml
