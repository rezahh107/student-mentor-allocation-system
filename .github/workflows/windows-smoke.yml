name: Windows CI Hardening

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

env:
  PYTHONUTF8: "1"
  PYTHONIOENCODING: "utf-8"
  PYTHONHASHSEED: "0"
  PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
  TZ: "Asia/Tehran"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

defaults:
  run:
    shell: pwsh
    working-directory: ${{ github.workspace }}

jobs:
  smoke:
    runs-on: windows-latest
    timeout-minutes: 30
    outputs:
      test-status: ${{ steps.smoke-run.outputs.status }}

    steps:
      - name: Configure Git/FS
        run: |
          git config --global core.autocrlf false
          git config --global core.longpaths true
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -Value 1 -Force

      - uses: actions/checkout@v4
        with: { fetch-depth: 1, persist-credentials: false }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "pip"
          cache-dependency-path: |
            **/constraints*.txt
            **/requirements*.in
            **/requirements*.txt
            **/pyproject.toml

      - name: venv
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference='Stop'
          if (Test-Path ".venv") { Remove-Item -Recurse -Force ".venv" }
          python -m venv .venv
          if (-not (Test-Path ".venv\Scripts\python.exe")) { throw "venv failed" }

      - name: Install (constraints-aware, retry)
        run: |
          & ".\.venv\Scripts\Activate.ps1"
          function Install-WithRetry([string]$Cmd,[int]$Max=3){ for($i=1;$i -le $Max;$i++){ try{ iex $Cmd; return } catch{ if($i -eq $Max){ throw } Start-Sleep -Seconds ([int][Math]::Pow(2,$i)) } } }
          Install-WithRetry "python -m pip install -U pip setuptools wheel"
          if ((Test-Path 'constraints-dev.txt') -and (Test-Path 'requirements-dev.in')) {
            Install-WithRetry "python -m pip install -c constraints-dev.txt -r requirements-dev.in"
          } elseif (Test-Path 'requirements.txt') {
            Install-WithRetry "python -m pip install -r requirements.txt"
          }
          Install-WithRetry "python -m pip install -e ."
          python -m pip check

      - name: Pre-clean
        run: |
          & ".\.venv\Scripts\Activate.ps1"
          if (Test-Path ".pytest_cache") { Remove-Item -Recurse -Force ".pytest_cache" }
          Remove-Item -Force ".coverage*" -ErrorAction SilentlyContinue
          Remove-Item -Force "coverage.xml" -ErrorAction SilentlyContinue

      - name: Execute Smoke Tests
        id: smoke-run
        env:
          PYTEST_ADDOPTS: "--maxfail=3 --tb=short --strict-config --strict-markers -v"
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference='Stop'
          & ".\.venv\Scripts\Activate.ps1"
          $targets = @(
            'tests/spec/test_normalization_edgecases.py',
            'tests/spec/test_business_rules.py',
            'tests/spec/test_excel_exporter_safety.py',
            'tests/windows/test_spawn_e2e.py'
          )
          $args = @(
            '--rootdir', $PWD,
            '--ignore-glob=**/System Volume Information',
            '--ignore-glob=**/WindowsApps',
            '--ignore-glob=**/Program Files*',
            '--cov=src','--cov-report=xml','--cov-report=term',
            '--junitxml=artifacts/junit.xml',
            '--html=artifacts/report.html','--self-contained-html'
          )
          try {
            python -m pytest $targets $args
            "status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } catch {
            "status=failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            throw
          }

      - name: Capture Debug Context (on failure)
        if: failure()
        run: |
          & ".\.venv\Scripts\Activate.ps1"
          @{
            timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            os_version = [System.Environment]::OSVersion.ToString()
            python_path = (Get-Command python).Source
            env_vars = Get-ChildItem env: | ForEach-Object { @{$_.Name = $_.Value} }
            disk = Get-PSDrive -PSProvider FileSystem | Select Name,Used,Free
          } | ConvertTo-Json -Depth 3 | Out-File artifacts/debug-context.json -Encoding UTF8

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-smoke-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            artifacts/**
            coverage.xml
            .pytest_cache/
          retention-days: 7
