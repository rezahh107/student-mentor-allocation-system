name: Windows CI Hardening

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

env:
  # Core Python Configuration
  PYTHONUTF8: "1"
  PYTHONIOENCODING: "utf-8"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
  PYTHONHASHSEED: "0"
  TZ: "Asia/Tehran"
  
  # Performance Optimizations
  PIP_NO_CACHE_DIR: "false"
  PIP_CACHE_DIR: "${{ github.workspace }}/.cache/pip"
  PYTEST_CACHE_DIR: "${{ github.workspace }}/.pytest_cache"
  
  # Debugging
  ACTIONS_RUNNER_DEBUG: "${{ secrets.ACTIONS_RUNNER_DEBUG || 'false' }}"
  ACTIONS_STEP_DEBUG: "${{ secrets.ACTIONS_STEP_DEBUG || 'false' }}"

defaults:
  run:
    shell: pwsh
    working-directory: ${{ github.workspace }}

jobs:
  smoke:
    name: Windows Smoke + Integration
    runs-on: windows-latest
    timeout-minutes: 30
    
    outputs:
      test-status: ${{ steps.test-execution.outputs.status }}
      coverage-percentage: ${{ steps.coverage-check.outputs.percentage }}

    steps:
      - name: 🔧 Configure Git and Filesystem
        run: |
          git config --global core.autocrlf false
          git config --global core.longpaths true
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -Value 1 -Force

      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: 🐍 Setup Python Environment
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "pip"
          cache-dependency-path: |
            **/requirements*.txt
            **/constraints*.txt
            **/pyproject.toml
            **/setup.py
            **/setup.cfg

      - name: 📦 Create Virtual Environment
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $ProgressPreference = "SilentlyContinue"
          
          # Remove existing venv if present
          if (Test-Path ".venv") {
            Remove-Item -Recurse -Force ".venv"
          }
          
          # Create fresh virtual environment
          python -m venv .venv
          
          # Verify venv creation
          if (-not (Test-Path ".venv\Scripts\python.exe")) {
            throw "Virtual environment creation failed"
          }
          
          Write-Host "✅ Virtual environment created successfully"

      - name: 🔄 Bootstrap Dependencies with Retry
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $ProgressPreference = "SilentlyContinue"
          
          # Activate virtual environment
          & ".\.venv\Scripts\Activate.ps1"
          
          function Install-WithRetry {
              param(
                  [string]$Command,
                  [int]$MaxAttempts = 3,
                  [int]$DelaySeconds = 5
              )
              
              for ($i = 1; $i -le $MaxAttempts; $i++) {
                  Write-Host "Attempt $i of $MaxAttempts: $Command"
                  try {
                      Invoke-Expression $Command
                      Write-Host "✅ Success on attempt $i"
                      return
                  }
                  catch {
                      if ($i -eq $MaxAttempts) {
                          throw "Failed after $MaxAttempts attempts: $_"
                      }
                      Write-Warning "Attempt $i failed: $_. Retrying in $DelaySeconds seconds..."
                      Start-Sleep -Seconds $DelaySeconds
                      $DelaySeconds = [Math]::Min(30, $DelaySeconds * 2)  # Exponential backoff
                  }
              }
          }
          
          # Upgrade pip/setuptools/wheel
          Install-WithRetry "python -m pip install --upgrade pip setuptools wheel"
          
          # Install dependencies based on availability
          $installed = $false
          
          if ((Test-Path "constraints-dev.txt") -and (Test-Path "requirements-dev.in")) {
              Write-Host "📦 Installing with constraints-dev.txt + requirements-dev.in"
              Install-WithRetry "python -m pip install -c constraints-dev.txt -r requirements-dev.in"
              $installed = $true
          }
          elseif (Test-Path "requirements-test.txt") {
              Write-Host "📦 Installing requirements-test.txt"
              Install-WithRetry "python -m pip install -r requirements-test.txt"
              $installed = $true
          }
          elseif (Test-Path "requirements.txt") {
              Write-Host "📦 Installing requirements.txt"
              Install-WithRetry "python -m pip install -r requirements.txt"
              $installed = $true
          }
          
          if (-not $installed) {
              Write-Warning "No requirements file found, installing pytest manually"
              Install-WithRetry "python -m pip install pytest pytest-cov pytest-html pytest-json-report"
          }
          
          # Install package in editable mode if setup.py/pyproject.toml exists
          if ((Test-Path "setup.py") -or (Test-Path "pyproject.toml")) {
              Install-WithRetry "python -m pip install -e ."
          }

      - name: 🔍 Validate Environment
        id: validate-env
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          
          & ".\.venv\Scripts\Activate.ps1"
          
          Write-Host "🐍 Python Version:"
          python --version
          
          Write-Host "`n📦 Installed Packages:"
          python -m pip list
          
          Write-Host "`n✅ Dependency Check:"
          python -m pip check
          
          # Create artifacts directory
          New-Item -ItemType Directory -Force -Path "artifacts" | Out-Null
          
          # Save environment info
          @{
              python_version = (python --version 2>&1)
              pip_version = (python -m pip --version)
              platform = [System.Environment]::OSVersion.ToString()
              timestamp = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          } | ConvertTo-Json | Out-File -FilePath "artifacts/environment.json" -Encoding UTF8

      - name: 🧹 Pre-Test Cleanup
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          
          & ".\.venv\Scripts\Activate.ps1"
          
          # Clean pytest cache
          if (Test-Path ".pytest_cache") {
              Remove-Item -Recurse -Force ".pytest_cache"
          }
          
          # Clean coverage data
          Remove-Item -Force ".coverage*" -ErrorAction SilentlyContinue
          Remove-Item -Force "coverage.xml" -ErrorAction SilentlyContinue
          
          # Run cleanup script if exists
          if (Test-Path "tools/ci/clean_state.py") {
              python tools/ci/clean_state.py --phase pre --namespace windows-ci-smoke
          }

      - name: 🧪 Execute Smoke Tests
        id: test-execution
        env:
          PYTEST_ADDOPTS: "--maxfail=3 --tb=short --strict-config --strict-markers -v"
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          
          & ".\.venv\Scripts\Activate.ps1"
          
          $testTargets = @(
              'tests/spec/test_normalization_edgecases.py',
              'tests/spec/test_business_rules.py',
              'tests/spec/test_excel_exporter_safety.py',
              'tests/windows/test_spawn_e2e.py'
          )
          
          $pytestArgs = @(
              '--rootdir', $PWD,
              '--ignore-glob=**/System Volume Information',
              '--ignore-glob=**/WindowsApps',
              '--ignore-glob=**/Program Files*',
              '--cov=src',
              '--cov-report=xml',
              '--cov-report=term',
              '--junitxml=artifacts/junit.xml',
              '--html=artifacts/report.html',
              '--self-contained-html'
          )
          
          # Execute tests with proper error handling
          $testResult = $true
          try {
              python -m pytest $testTargets $pytestArgs
              Write-Host "✅ Smoke tests passed"
              echo "status=success" >> $env:GITHUB_OUTPUT
          }
          catch {
              Write-Warning "❌ Smoke tests failed: $_"
              echo "status=failure" >> $env:GITHUB_OUTPUT
              $testResult = $false
          }
          
          if (-not $testResult) {
              exit 1
          }

      - name: 🧪 Execute Integration Tests
        if: success()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          
          & ".\.venv\Scripts\Activate.ps1"
          
          $testTargets = @(
              'tests/integration/test_middleware_chain.py',
              'tests/integration/test_middleware_order.py'
          )
          
          $pytestArgs = @(
              '--rootdir', $PWD,
              '--ignore-glob=**/System Volume Information',
              '--ignore-glob=**/WindowsApps',
              '--ignore-glob=**/Program Files*',
              '--cov=src',
              '--cov-append',
              '--cov-report=xml',
              '--junitxml=artifacts/junit-integration.xml'
          )
          
          python -m pytest $testTargets $pytestArgs

      - name: 📊 Coverage Analysis
        id: coverage-check
        if: always()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          
          & ".\.venv\Scripts\Activate.ps1"
          
          if (Test-Path "coverage.xml") {
              # Parse coverage percentage
              [xml]$coverage = Get-Content "coverage.xml"
              $percentage = [math]::Round($coverage.coverage.'line-rate' * 100, 2)
              Write-Host "📊 Coverage: $percentage%"
              echo "percentage=$percentage" >> $env:GITHUB_OUTPUT
              
              # Fail if coverage below threshold
              if ($percentage -lt 70) {
                  Write-Warning "⚠️ Coverage below 70% threshold"
              }
          }

      - name: 🐛 Capture Debug Context on Failure
        if: failure()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Continue"  # Don't fail on debug collection
          
          & ".\.venv\Scripts\Activate.ps1"
          
          # Collect system information
          @{
              timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              os_version = [System.Environment]::OSVersion.ToString()
              python_path = (Get-Command python).Source
              env_vars = Get-ChildItem env: | ForEach-Object { @{$_.Name = $_.Value} }
              disk_space = Get-PSDrive -PSProvider FileSystem | Select-Object Name, Used, Free
          } | ConvertTo-Json -Depth 3 | Out-File -FilePath "artifacts/debug-context.json" -Encoding UTF8
          
          # Run debug script if exists
          if (Test-Path "tools/ci/debug_context.py") {
              python tools/ci/debug_context.py --reason failure --namespace windows-ci-smoke
          }

      - name: 🧹 Post-Test Cleanup
        if: always()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Continue"
          
          if (Test-Path ".venv\Scripts\Activate.ps1") {
              & ".\.venv\Scripts\Activate.ps1"
              
              if (Test-Path "tools/ci/clean_state.py") {
                  python tools/ci/clean_state.py --phase post --namespace windows-ci-smoke
              }
          }

      - name: 📤 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            artifacts/
            coverage.xml
            .pytest_cache/
            logs/
          if-no-files-found: warn
          retention-days: 7

      - name: 📈 Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        with:
          files: |
            artifacts/junit*.xml
          check_name: "Smoke Test Results"
          comment_mode: failures
          fail_on: "test failures"
