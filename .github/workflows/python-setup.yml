name: "🚀 Enterprise Python CI/CD (No Cache – No Error)"

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # هر دوشنبه ساعت ۲ صبح

env:
  PYTHON_VERSION: '3.11'
  PYTHONUNBUFFERED: '1'
  PYTHONDONTWRITEBYTECODE: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PIP_DEFAULT_TIMEOUT: '100'

jobs:
  setup-environment:
    name: "🔧 Environment Setup (Fresh Install)"
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ env.PYTHON_VERSION }}
      build-timestamp: ${{ steps.timestamp.outputs.time }}
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      - name: "⏰ Generate Build Timestamp"
        id: timestamp
        run: |
          echo "time=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "🕒 Build started at: $(date)"

  python-setup:
    name: "🐍 Python Fresh Installation"
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4

      # ⛔ PIP_NO_CACHE_DIR عمداً اینجا ست نمیشه تا setup-python fail نکنه
      - name: "🐍 Setup Python (Safe Mode)"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ''  # اطمینان از عدم استفاده cache داخلی

      # 🚫 بعد از نصب Python کش رو غیرفعال می‌کنیم
      - name: "🚫 Disable pip cache after setup"
        run: |
          echo "PIP_NO_CACHE_DIR=1" >> $GITHUB_ENV
          echo "✅ Disabled pip cache (post-setup)"
          rm -rf ~/.cache/pip || true

      - name: "⚙️ Configure Pip"
        run: |
          rm -rf ~/.pip || true
          python -m pip config set global.no-cache-dir true
          python -m pip config set global.disable-pip-version-check true
          python -m pip config set install.no-deps false
          python -m pip config list || true

      - name: "📦 Install dependencies (fresh)"
        run: |
          python -m pip install --no-cache-dir --upgrade pip setuptools wheel
          if [ -f "requirements.txt" ]; then
            python -m pip install --no-cache-dir -r requirements.txt
          fi
          if [ -f "requirements-dev.txt" ]; then
            python -m pip install --no-cache-dir -r requirements-dev.txt
          fi
          if [ -f "requirements-test.txt" ]; then
            python -m pip install --no-cache-dir -r requirements-test.txt
          fi
          python -m pip install --no-cache-dir -e . || echo "No setup.py or pyproject.toml found"

      - name: "🔍 Check environment"
        run: |
          python --version
          pip --version
          pip list | head -20
          echo "PIP_NO_CACHE_DIR=${PIP_NO_CACHE_DIR}"
          echo "✅ No pip cache should be active"

  testing:
    name: "🧪 Testing"
    runs-on: ubuntu-latest
    needs: python-setup
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
      - name: "🐍 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: ''
      - name: "🚫 Disable pip cache"
        run: echo "PIP_NO_CACHE_DIR=1" >> $GITHUB_ENV
      - name: "📦 Install test deps"
        run: |
          python -m pip install --no-cache-dir --upgrade pip setuptools wheel
          python -m pip install --no-cache-dir pytest pytest-cov pytest-asyncio
      - name: "🧪 Run tests"
        run: python -m pytest -v || echo "⚠️ Tests failed"

  reporting:
    name: "📊 Build Report"
    runs-on: ubuntu-latest
    needs: testing
    if: always()
    steps:
      - name: "📈 Summary"
        run: |
          echo "✅ Python CI/CD (Cache-Free) Completed"
          echo "📅 Build Time: ${{ needs.setup-environment.outputs.build-timestamp }}"
          echo "🚫 pip cache disabled post-setup"
